# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  rules:
    always_declare_return_types: true
    avoid_bool_literals_in_conditional_expressions: true
    avoid_multiple_declarations_per_line: true
    avoid_setters_without_getters: true
    avoid_slow_async_io: true
    avoid_types_on_closure_parameters: true
    avoid_unused_constructor_parameters: true
    avoid_void_async: true
    cascade_invocations: true
    directives_ordering: true
    eol_at_end_of_file: true
    noop_primitive_operations: true
    omit_local_variable_types: true
    only_throw_errors: true
    prefer_constructors_over_static_methods: true
    prefer_final_in_for_each: true
    prefer_final_locals: true
    prefer_null_aware_method_calls: true
    prefer_relative_imports: true
    prefer_single_quotes: true
    require_trailing_commas: true
    sized_box_shrink_expand: true
    sort_constructors_first: true
    sort_pub_dependencies: true
    sort_unnamed_constructors_first: true
    type_annotate_public_apis: true
    unawaited_futures: true
    unnecessary_await_in_return: true
    unnecessary_parenthesis: true
    unnecessary_to_list_in_spreads: true
    use_colored_box: true
    use_decorated_box: true
    use_if_null_to_convert_nulls_to_bools: true
    use_is_even_rather_than_modulo: true
    use_named_constants: true
    use_string_buffers: true
    use_super_parameters: true
    use_to_and_as_if_applicable: true